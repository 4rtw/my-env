version: "3.9"
services:

  mongo:
    image: mongo:latest
    ports:
      - 27017:27017
    labels:
      - traefik.http.routers.mongo.rule=Host(`mongo.${DNS_NAME}`)
      - "traefik.http.routers.mongo.tls=true"
      - "traefik.http.routers.mongo.tls.certresolver=myresolver"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${USER_NAME}
      - MONGO_INITDB_ROOT_PASSWORD=${USER_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - env-network
  
  mysql:
    image: mysql:latest
    ports:
      - 3306:3306
    labels:
      - traefik.http.routers.mysql.rule=Host(`mysql.${DNS_NAME}`)
      - "traefik.http.routers.mysql.tls=true"
      - "traefik.http.routers.mysql.tls.certresolver=myresolver"
    environment:
      - MYSQL_ROOT_PASSWORD=${ROOT_PASSWORD}
      - MYSQL_USER=${USER_NAME}
      - MYSQL_PASSWORD=${USER_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - env-network
  
  postgresql:
    image: postgres:latest
    ports:
      - 5432:5432
    labels:
      - traefik.http.routers.postgresql.rule=Host(`postgresql.${DNS_NAME}`)
      - "traefik.http.routers.postgresql.tls=true"
      - "traefik.http.routers.postgresql.tls.certresolver=myresolver"
    environment:
      - POSTGRES_USER=${USER_NAME}
      - POSTGRES_PASSWORD=${USER_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    networks:
      - env-network

  adminer:
    image: adminer:latest
    ports:
      - 8020:8080
    labels:
      - traefik.http.routers.adminer.rule=Host(`adminer.${DNS_NAME}`)
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
    networks:
      - env-network

  hello-world:
    image: nginxdemos/hello
    ports:
      - 8010:80
    labels:
      - traefik.http.routers.hello-world.rule=Host(`www.${DNS_NAME}`)
      - "traefik.http.routers.hello-world.tls=true"
      - "traefik.http.routers.hello-world.tls.certresolver=myresolver"
    networks:
      - env-network

  traefik:
    image: traefik:v2.9
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--providers.docker"
      - "--api.insecure=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesResolvers.myresolver.acme.email=ando.l.andria@gmail.com"
      - "--certificatesResolvers.myresolver.acme.storage=/data/acme.json"
      - "--certificatesresolvers.myresolver.acme.caServer=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
    labels:
      - "traefik.http.middlewares.httpsonly.redirectscheme.scheme=https"
      - "traefik.http.middlewares.httpsonly.redirectscheme.permanent=true"
      - "traefik.http.routers.httpsonly.rule=HostRegexp(`{any:.*}`)"
      - "traefik.http.routers.httpsonly.middlewares=httpsonly"
      - "traefik.http.routers.dashboard.rule=Host(`dev.${DNS_NAME}`)"
      - "traefik.http.routers.dashboard.service=dashboard@internal"
      - "traefik.http.routers.api.rule=Host(`dev.${DNS_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/acme.json:/data/acme.json
    networks:
      - env-network

volumes:
  mongo-data:
    driver: local
  mysql-data:
    driver: local
  postgres-data:
    driver: local

networks:
  env-network:
    driver: bridge
